// Generated by CoffeeScript 1.8.0
(function() {
  var EventEmitter, HttpTransport, ResponseWrapper, debug, express, http, lodash,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  http = require('http');

  express = require('express');

  lodash = require('lodash');

  debug = require('debug');

  http.globalAgent.maxSockets = 65535;

  ResponseWrapper = (function() {
    function ResponseWrapper(res) {
      this.res = res;
    }

    ResponseWrapper.prototype.write = function(message) {
      this.res.write(JSON.stringify(message));
      return this.res.end();
    };

    return ResponseWrapper;

  })();

  HttpTransport = (function(_super) {
    __extends(HttpTransport, _super);

    function HttpTransport(server) {
      var args, bodyParser, callbackFired, errorHandler, httpServer;
      this.host = server.host, this.fileLogger = server.fileLogger;
      this.port = server.port;
      this.server = express();
      bodyParser = require('body-parser');
      this.server.use(bodyParser.urlencoded({
        extended: true,
        limit: '10mb'
      }));
      this.server.use(bodyParser.json({
        limit: '10mb'
      }));
      this.server.post('/', (function(_this) {
        return function(req, res) {
          return _this.handleRemoteRequest(req, res);
        };
      })(this));
      callbackFired = false;
      errorHandler = (function(_this) {
        return function(err) {
          if (!callbackFired) {
            _this.emit('initialized', err);
            return callbackFired = true;
          }
        };
      })(this);
      httpServer = http.createServer(this.server);
      httpServer.once('error', errorHandler);
      args = [this.port];
      if (this.host != null) {
        args.push(this.host);
      }
      args.push(2048);
      args.push((function(_this) {
        return function(err) {
          if (!callbackFired) {
            _this.emit('initialized', err);
            return callbackFired = true;
          }
        };
      })(this));
      httpServer.listen.apply(httpServer, args);
      this.httpServer = httpServer;
    }

    HttpTransport.prototype.close = function(){
      this.httpServer.close();
    };

    HttpTransport.prototype.handleRemoteRequest = function(req, res) {
      if (this.fileLogger.enabled) {
        this.fileLogger.log("Receive message \n " + (JSON.stringify(req.body)));
      }
      return this.emit('message', req.body, new ResponseWrapper(res));
    };

    HttpTransport.prototype.send = function(destination, message, callback) {
      var reqOption;
      if (this.fileLogger.enabled) {
        this.fileLogger.log("Send message \n " + (JSON.stringify(message)));
      }
      reqOption = {
        hostname: destination.host,
        port: destination.port,
        requestBody: message
      };
      return this.httpRequest(reqOption, (function(_this) {
        return function(err, body, resp) {
          var respObj;
          if (err != null) {
            if (callback != null) {
              callback(err);
            } else {
              _this.emit('error', err);
            }
            return;
          }
          if (callback != null) {
            respObj = JSON.parse(body);
            return callback(null, respObj);
          }
        };
      })(this));
    };

    HttpTransport.prototype.httpRequest = function(options, handler) {
      var req;
      options.method = 'POST';
      options.headers = {
        "Content-type": "application/json; charset=utf-8"
      };
      req = http.request(options, function(res) {
        var body;
        res.setEncoding('utf8');
        body = '';
        res.on('data', function(chunk) {
          return body += chunk;
        });
        return res.on('end', function() {
          return handler(null, body, res);
        });
      });
      req.on('error', function(e) {
        return handler(e);
      });
      if (options.requestBody != null) {
        if (typeof options === 'string') {
          req.write(options.requestBody);
        } else {
          req.write(JSON.stringify(options.requestBody));
        }
      }
      req.end();
      return req;
    };

    return HttpTransport;

  })(EventEmitter);

  module.exports = HttpTransport;

}).call(this);
