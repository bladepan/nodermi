// Generated by CoffeeScript 1.8.0
(function() {
  var ObjectRegistry, debug, encodeHelper, lodash, logger, weak;

  weak = require('weak');

  debug = require('debug');

  lodash = require('lodash');

  encodeHelper = require('./common').encodeHelper;

  logger = debug('nodermi:objRegistry');

  ObjectRegistry = (function() {
    function ObjectRegistry(options) {
      this.objects = {};
      this.functions = {};
      this.weakFunctions = {};
      this.sequence = 0;
      this.size = 0;
      if (options == null) {
        options = {};
      }
      lodash.defaults(options, {
        expiration: 30 * 1000
      });
      this.options = options;
      setInterval(this._clearFunctions.bind(this), this.options.expiration);
    }

    ObjectRegistry.prototype.registObject = function(obj) {
      var id;
      id = encodeHelper.getHiddenRid(obj);
      if (id == null) {
        id = this.getSequence();
        encodeHelper.setHiddenRid(obj, id);
        if (typeof obj === 'function') {
          this._putFunction(id, obj);
        } else {
          this._putObject(id, obj);
        }
        this.size++;
        if (this.sequence % 100 === 0) {
          logger("ObjectRegistry Holds reference to " + this.size + " objects");
        }
      }
      return id;
    };

    ObjectRegistry.prototype._putObject = function(id, obj) {
      return this.objects[id] = weak(obj, (function(_this) {
        return function() {
          delete _this.objects[id];
          logger("reclaim " + id);
          return _this.size--;
        };
      })(this));
    };

    ObjectRegistry.prototype.getSequence = function() {
      var id;
      id = this.sequence.toString(35);
      this.sequence++;
      return id;
    };

    ObjectRegistry.prototype._putFunction = function(id, func) {
      var expirationTime;
      expirationTime = Date.now();
      if (func.__r_expire != null) {
        expirationTime += func.__r_expire;
      } else {
        expirationTime += this.options.expiration;
      }
      this.functions[id] = {
        val: func,
        expiration: expirationTime
      };
      return this.size++;
    };

    ObjectRegistry.prototype._clearFunctions = function() {
      var i, id, k, now, toDelete, v, _i, _len, _ref, _results;
      toDelete = [];
      now = Date.now();
      _ref = this.functions;
      for (k in _ref) {
        v = _ref[k];
        if (v.expiration < now) {
          toDelete.push({
            id: k,
            val: v.val
          });
        }
      }
      _results = [];
      for (_i = 0, _len = toDelete.length; _i < _len; _i++) {
        i = toDelete[_i];
        id = i.id;
        delete this.functions[id];
        logger("move func " + id + " to weak map");
        _results.push(this._putObject(id, i.val));
      }
      return _results;
    };

    ObjectRegistry.prototype._getFunction = function(id) {
      var fromPermanent;
      fromPermanent = this.functions[id];
      if (fromPermanent != null) {
        fromPermanent.expiration += this.options.expiration;
        logger("increment expiration to " + fromPermanent.expiration);
        return fromPermanent.val;
      }
      return null;
    };

    ObjectRegistry.prototype.getObject = function(id) {
      var func, val;
      func = this._getFunction(id);
      if (func != null) {
        return func;
      }
      val = this.objects[id];
      if (val !== void 0 && weak.isDead(val)) {
        delete this.objects[id];
        this.size--;
        logger("found dead object " + id);
        return null;
      }
      return val;
    };

    return ObjectRegistry;

  })();

  module.exports = ObjectRegistry;

}).call(this);
