// Generated by CoffeeScript 1.8.0
(function() {
  var EventEmitter, RmiService, addHiddenField, express, fs, globalObj, http, lodash, util, weak,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  http = require('http');

  util = require('util');

  EventEmitter = require('events').EventEmitter;

  weak = require('weak');

  express = require('express');

  lodash = require('lodash');

  globalObj = global;

  RmiService = (function(_super) {
    __extends(RmiService, _super);

    RmiService.prototype._privatePrefix = '_';


    /*
    __defineGetter__  __defineSetter__   __lookupGetter__  __lookupSetter__  
    constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString        
    toString valueOf toJSON
     */

    RmiService.prototype._excludeMethods = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf', 'toJSON'];

    function RmiService(_option, callback) {
      var args, bodyParser, callbackFired, errorHandler, httpServer, _ref;
      this._option = _option;
      _ref = this._option, this.host = _ref.host, this.port = _ref.port;
      this._logging = true;
      this._fileName = "localhost-" + this.port + ".log";
      if (this.host != null) {
        this._fileName = "" + this.host + "-" + this.port + ".log";
      }
      this.sequence = 42;
      this.serverObj = {};
      this.methods = {};
      this.objects = {};
      this.server = express();
      bodyParser = require('body-parser');
      this.server.use(bodyParser.urlencoded({
        extended: true
      }));
      this.server.use(bodyParser.json());
      this.server.post('/', (function(_this) {
        return function(req, res) {
          return _this.handleRemoteRequest(req, res);
        };
      })(this));
      callbackFired = false;
      errorHandler = function(err) {
        if (callback) {
          callback(err);
          return callbackFired = true;
        }
      };
      httpServer = http.createServer(this.server);
      httpServer.on('error', errorHandler);
      args = [this.port];
      if (this.host != null) {
        args.push(this.host);
      }
      args.push(511);
      args.push((function(_this) {
        return function(err) {
          if ((callback != null) && !callbackFired) {
            callback(err, _this);
            _this.server.removeListener('error', errorHandler);
          }
          return _this._log("RmiService listening on " + _this.port);
        };
      })(this));
      httpServer.listen.apply(httpServer, args);
    }

    RmiService.prototype._isPrivate = function(name, skipList, includeList) {
      var exclude, include, _i, _j, _k, _len, _len1, _len2, _ref;
      if (includeList != null) {
        if (name === '__r_include') {
          return false;
        }
        if (typeof includeList === 'string' && name === includeList) {
          return false;
        }
        for (_i = 0, _len = includeList.length; _i < _len; _i++) {
          include = includeList[_i];
          if (name === include) {
            return false;
          }
        }
      }
      if (name.indexOf(this._privatePrefix) === 0) {
        return true;
      }
      if (skipList != null) {
        if (typeof skipList === 'string' && name === skipList) {
          return true;
        }
        for (_j = 0, _len1 = skipList.length; _j < _len1; _j++) {
          exclude = skipList[_j];
          if (name === exclude) {
            return true;
          }
        }
      }
      _ref = this._excludeMethods;
      for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
        exclude = _ref[_k];
        if (name === exclude) {
          return true;
        }
      }
      return false;
    };

    RmiService.prototype._log = function(str) {
      if (this._logging) {
        return fs.appendFile(this._fileName, str + '\n', function(err) {
          if (err) {
            console.log("nodermi logging error");
            console.log(err);
            return console.log(err.stack);
          }
        });
      }
    };

    RmiService.prototype.getSequence = function() {
      return this.sequence++;
    };

    RmiService.prototype.handleRemoteRequest = function(req, res) {
      var arg, args, method, obj, objstr, remoteObj, serialized, _i, _len, _ref;
      this._log("" + this.host + ":" + this.port + " receive request...");
      this._log(JSON.stringify(req.body));
      if (req.body.type === 'retrive') {
        obj = this.serverObj;
        if (req.body.objName != null) {
          obj = this.serverObj[req.body.objName];
        }
        serialized = this.serializeObject(obj);
        objstr = JSON.stringify(serialized);
        res.write(objstr);
        res.end();
        return;
      }
      if (req.body.type === 'invoke') {
        if (req.body.methodName != null) {
          obj = this.objects[req.body.objId];
          method = obj[req.body.methodName];
        } else {
          obj = {};
          method = this.objects[req.body.objId];
        }
        if (method == null) {
          return this.noSuchMethod(res);
        }
        args = [];
        _ref = req.body.args;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          arg = _ref[_i];
          remoteObj = this.parseRemoteObj(arg, {
            host: req.body.host,
            port: req.body.port
          }, {});
          args.push(remoteObj);
        }
        method.apply(obj, args);
        res.end();
      }
    };

    RmiService.prototype.createSkeleton = function(endPoint, obj) {
      return this.serverObj[endPoint] = obj;
    };

    RmiService.prototype.serializeObject = function(obj) {
      return this.__serializeObject(obj, {});
    };

    RmiService.prototype.__createRemoteDesc = function(id, host, port, type, source) {
      var result;
      result = source != null ? source : {};
      result.__r_id = id;
      result.__r_type = type;
      if ((host != null) && (port != null) && (host !== this.host || port !== this.port)) {
        result.__r_host = host;
        result.__r_port = port;
      }
      return result;
    };

    RmiService.prototype.__newRemoteObjectDesc = function(id, host, port) {
      return this.__createRemoteDesc(id, host, port, 'objDes');
    };

    RmiService.prototype.__newRemoteArrayDesc = function(id, host, port) {
      return this.__createRemoteDesc(id, host, port, 'arrDes', {
        __r_arr: []
      });
    };

    RmiService.prototype.__addPropToRemoteObjDesc = function(desc, key, v) {
      if (desc.__r_props == null) {
        desc.__r_props = {};
      }
      return desc.__r_props[key] = v;
    };

    RmiService.prototype.__newRemoteFunctionDesc = function(id, host, port) {
      return this.__createRemoteDesc(id, host, port, 'funcDes');
    };

    RmiService.prototype.__newRemoteDateDesc = function(obj) {
      return {
        __r_type: 'dateDes',
        __r_date: obj.getTime()
      };
    };

    RmiService.prototype.__newRemoteErrorDesc = function(obj) {
      return {
        __r_type: 'objDes',
        __r_props: {
          message: obj.message,
          stack: obj.stack
        }
      };
    };

    RmiService.prototype.__serializeObject = function(obj, map) {
      var cached, element, funcDesc, host, id, k, objDesc, port, v, _i, _len;
      if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
        return obj;
      }
      if (weak.isWeakRef(obj)) {
        obj = weak.get(obj);
        if (obj == null) {
          return null;
        }
      }
      if (obj === globalObj) {
        throw new Error("nodermi Error : trying to serialize global object");
      }
      if (lodash.isDate(obj)) {
        return this.__newRemoteDateDesc(obj);
      }
      if (obj instanceof Error) {
        return this.__newRemoteErrorDesc(obj);
      }
      if (obj.__r_id == null) {
        addHiddenField(obj, '__r_id', this.getSequence());
        this.objects[obj.__r_id] = obj;
      }
      host = obj.__r_host != null ? obj.__r_host : this.host;
      port = obj.__r_port != null ? obj.__r_port : this.port;
      if (map[host] == null) {
        map[host] = {};
      }
      if (map[host][port] == null) {
        map[host][port] = {};
      }
      id = obj.__r_id;
      cached = map[host][port][id] != null ? map[host][port][id] : null;
      if (cached && typeof obj !== 'function') {
        return this.__createRemoteDesc(id, host, port, 'ref');
      } else {
        map[host][port][id] = true;
        if (obj.__r_type != null) {
          return this.serializeForRemoteTypes(obj, map);
        }
        if (typeof obj === 'function') {
          funcDesc = this.__newRemoteFunctionDesc(id, host, port);
          return funcDesc;
        }
        if (lodash.isArray(obj)) {
          objDesc = this.__newRemoteArrayDesc(id, host, port);
          for (_i = 0, _len = obj.length; _i < _len; _i++) {
            element = obj[_i];
            objDesc.__r_arr.push(this.__serializeObject(element, map));
          }
          return objDesc;
        }
        objDesc = this.__newRemoteObjectDesc(id, this.host, this.port);
        for (k in obj) {
          v = obj[k];
          if (this._isPrivate(k, obj.__r_skip, obj.__r_include)) {
            continue;
          }
          if (typeof v === 'function' && (v.__r_type == null)) {
            this.__addPropToRemoteObjDesc(objDesc, k, {
              __r_type: 'funcDes'
            });
          } else {
            this.__addPropToRemoteObjDesc(objDesc, k, this.__serializeObject(v, map));
          }
        }
        return objDesc;
      }
    };

    RmiService.prototype.serializeForRemoteTypes = function(obj, map) {
      var k, result, v, _i, _len;
      if (obj.__r_type === 'objDes' || obj.__r_type === 'funcDes') {
        this._log("descriptors should only live in transmission layer");
        return obj;
      }
      if (obj.__r_type === 'object') {
        if (lodash.isArray(obj)) {
          result = this.__newRemoteArrayDesc(obj.__r_id, obj.__r_host, obj.__r_port);
          for (_i = 0, _len = obj.length; _i < _len; _i++) {
            v = obj[_i];
            result.__r_arr.push(this.__serializeObject(v, map));
          }
          return result;
        }
        result = this.__newRemoteObjectDesc(obj.__r_id, obj.__r_host, obj.__r_port);
        for (k in obj) {
          v = obj[k];
          if (k.indexOf('__r_') === 0) {
            continue;
          }
          this.__addPropToRemoteObjDesc(result, k, this.__serializeObject(v, map));
        }
        return result;
      }
      if (obj.__r_type === 'function') {
        return this.__newRemoteFunctionDesc(obj.__r_id, obj.__r_host, obj.__r_port);
      }
    };

    RmiService.prototype.retriveObj = function(option, callback) {
      var reqOption;
      reqOption = {
        hostname: option.host,
        port: option.port,
        requestBody: {
          type: 'retrive',
          objName: option.objName
        }
      };
      return this.httpRequest(reqOption, (function(_this) {
        return function(err, body, resp) {
          var respObj, result;
          if (err != null) {
            callback(err);
            return;
          }
          _this._log("" + _this.host + ":" + _this.port + " receive response...");
          _this._log(body);
          respObj = JSON.parse(body);
          result = _this.parseRemoteObj(respObj, option, {});
          return callback(null, result);
        };
      })(this));
    };

    RmiService.prototype.__appendRemoteMarker = function(remoteObj, desc, context, type) {
      var host, id, port;
      id = desc.__r_id != null ? desc.__r_id : desc;
      host = desc.__r_host != null ? desc.__r_host : context.host;
      port = desc.__r_port != null ? desc.__r_port : context.port;
      addHiddenField(remoteObj, '__r_id', id);
      addHiddenField(remoteObj, '__r_host', host);
      addHiddenField(remoteObj, '__r_port', port);
      return addHiddenField(remoteObj, '__r_type', type);
    };

    RmiService.prototype.__newRemoteArr = function(desc, context) {
      var result;
      result = [];
      return this.__appendRemoteMarker(result, desc, context, 'object');
    };

    RmiService.prototype.__newRemoteObj = function(desc, context) {
      var result;
      result = {};
      return this.__appendRemoteMarker(result, desc, context, 'object');
    };

    RmiService.prototype.__newRemoteFunc = function(desc, context) {
      var func, host, id, port, _this;
      id = desc.__r_id != null ? desc.__r_id : desc;
      host = desc.__r_host != null ? desc.__r_host : context.host;
      port = desc.__r_port != null ? desc.__r_port : context.port;
      if (host === this.host && port === this.port) {
        return this.objects[id];
      }
      _this = this;
      func = (function(_this, host, port, id) {
        return function() {
          return _this.invokeRemoteFunc(host, port, id, arguments);
        };
      })(_this, host, port, id);
      this.__appendRemoteMarker(func, desc, context, 'function');
      return func;
    };

    RmiService.prototype.__findInMap = function(desc, context, map) {
      var host, id, port;
      id = desc.__r_id;
      host = desc.__r_host != null ? desc.__r_host : context.host;
      port = desc.__r_port != null ? desc.__r_port : context.port;
      return map[host][port][id];
    };

    RmiService.prototype.__putInMap = function(desc, context, map) {
      var host, id, port;
      id = desc.__r_id;
      host = desc.__r_host != null ? desc.__r_host : context.host;
      port = desc.__r_port != null ? desc.__r_port : context.port;
      if (map[host] == null) {
        map[host] = {};
      }
      if (map[host][port] == null) {
        map[host][port] = {};
      }
      return map[host][port][id] = desc;
    };

    RmiService.prototype.__newRemoteMethod = function(desc, key, context) {
      var func, host, id, port, _this;
      id = desc.__r_id != null ? desc.__r_id : desc;
      host = desc.__r_host != null ? desc.__r_host : context.host;
      port = desc.__r_port != null ? desc.__r_port : context.port;
      _this = this;
      func = (function(_this, host, port, id) {
        return function() {
          return _this.invokeRemoteMethod(host, port, id, key, arguments);
        };
      })(_this, host, port, id);
      this.__appendRemoteMarker(func, desc, context, 'function');
      return func;
    };

    RmiService.prototype.parseRemoteObj = function(obj, context, map) {
      var k, localObj, remoteFunc, result, v, _i, _len, _ref, _ref1;
      if ((obj == null) || (obj.__r_type == null)) {
        return obj;
      }
      if (obj.__r_host === this.host && obj.__r_port === this.port) {
        localObj = this.objects[obj.__r_id];
        this.__putInMap(localObj, context, map);
        return localObj;
      }
      if (obj.__r_type === 'dateDes') {
        return new Date(obj.__r_date);
      }
      if (obj.__r_type === 'objDes' || obj.__r_type === 'arrDes') {
        result = null;
        if (obj.__r_type === 'objDes') {
          result = this.__newRemoteObj(obj, context);
        }
        if (obj.__r_type === 'arrDes') {
          result = this.__newRemoteArr(obj, context);
        }
        this.__putInMap(result, context, map);
        _ref = obj.__r_props;
        for (k in _ref) {
          v = _ref[k];
          if ((v != null) && v.__r_type === 'funcDes') {
            result[k] = this.__newRemoteMethod(obj, k, context);
          } else {
            result[k] = this.parseRemoteObj(v, context, map, obj);
          }
        }
        if (obj.__r_arr != null) {
          _ref1 = obj.__r_arr;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            v = _ref1[_i];
            result.push(this.parseRemoteObj(v, context, map));
          }
        }
        return result;
      }
      if (obj.__r_type === 'funcDes') {
        remoteFunc = this.__newRemoteFunc(obj, context);
        this.__putInMap(remoteFunc, context, map);
        return remoteFunc;
      }
      if (obj.__r_type === 'ref') {
        if (obj.__r_host === this.host && obj.__r_port === this.port) {
          return this.objects[obj.__r_id];
        }
        return this.__findInMap(obj, context, map);
      }
      throw new Error('Unknown type');
    };

    RmiService.prototype.invokeRemoteFunc = function(host, port, id, args) {
      var arg, callback, lastArg, reqOption, serializedArgs, _i, _len;
      serializedArgs = [];
      callback = null;
      if (args != null) {
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          serializedArgs.push(this.serializeObject(arg));
        }
        lastArg = args[args.length - 1];
        if (typeof lastArg === 'function') {
          callback = lastArg;
        }
      }
      reqOption = {
        hostname: host,
        port: port,
        requestBody: {
          type: 'invoke',
          objId: id,
          host: this.host,
          port: this.port,
          args: serializedArgs
        }
      };
      this.httpRequest(reqOption, (function(_this) {
        return function(err, body, resp) {
          if (err != null) {
            if (callback != null) {
              callback(err);
            } else {
              _this.emit('error', err);
            }
          }
        };
      })(this));
      return null;
    };

    RmiService.prototype.invokeRemoteMethod = function(host, port, id, methodName, args) {
      var arg, callback, lastArg, reqOption, serializedArgs, _i, _len;
      serializedArgs = [];
      callback = null;
      if (args != null) {
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          serializedArgs.push(this.serializeObject(arg));
        }
        lastArg = args[args.length - 1];
        if (typeof lastArg === 'function') {
          callback = lastArg;
        }
      }
      reqOption = {
        hostname: host,
        port: port,
        requestBody: {
          type: 'invoke',
          objId: id,
          methodName: methodName,
          host: this.host,
          port: this.port,
          args: serializedArgs
        }
      };
      return this.httpRequest(reqOption, (function(_this) {
        return function(err, body, resp) {
          if (err != null) {
            if (callback != null) {
              callback(err);
            } else {
              _this.emit('error', err);
            }
          }
        };
      })(this));
    };

    RmiService.prototype.httpRequest = function(options, handler) {
      var req;
      options.method = 'POST';
      options.headers = {
        "Content-type": "application/json; charset=utf-8"
      };
      req = http.request(options, function(res) {
        var body;
        res.setEncoding('utf8');
        body = '';
        res.on('data', function(chunk) {
          return body += chunk;
        });
        return res.on('end', function() {
          return handler(null, body, res);
        });
      });
      req.on('error', function(e) {
        return handler(e);
      });
      if (options.requestBody != null) {
        this._log("post " + options.hostname + ":" + options.port + " " + (JSON.stringify(options.requestBody)));
        if (typeof options === 'string') {
          req.write(options.requestBody);
        } else {
          req.write(JSON.stringify(options.requestBody));
        }
      }
      req.end();
      return req;
    };

    return RmiService;

  })(EventEmitter);

  addHiddenField = function(obj, key, val) {
    return Object.defineProperty(obj, key, {
      value: val,
      writable: false,
      enumerable: false,
      configurable: false
    });
  };

  exports.createRmiService = function(options, callback) {
    return new RmiService(options, callback);
  };

}).call(this);
