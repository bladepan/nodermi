// Generated by CoffeeScript 1.8.0

/*
remote Object Stub
{
  __r_id
  __r_host
  __r_port
  __r_type : 'object'
}

## remote descriptors, only lives in transportation layer

remote Object descriptor
{
  __r_id
  __r_host
  __r_port
  __r_type 
  origin : 1 means it is from the receiving machine
}

client is free to get a function from a remote object and invoke it directly,
so we need send full function descriptors.
Say we have an object obj1
{
  func1 : function(){
  
  }
}
When the client get a reference of this object's reference, 
we assume the client will only:
1. call func1 within the current context the client code is in, like

var func1=obj1.func1;
func1();

2. call func1 within the context of another object, like

var func1=obj1.func1;
func1.apply(obj2);

3. call func1 within context obj1, like
obj1.func1()

In all cases, we will pass 'this' to the host side only if 'this' for func1 in the client 
are of the same origin as func1; other wise, we just use null as 'this' in the host side.

remote Object descriptor
{
  __r_id
  __r_host
  __r_port
  __r_type : 'objDes' or 'arrDes' or 'dateDes'
  __r_arr : [ elements for array]
  __r_date : date.getTime()
  __r_props : {
      key/value mapping of primitive types property,  other remote object property, functions
  }
}

remote Function stub
{
  __r_id
  __r_host
  __r_port
  __r_type : 'function'
}



remote Function descriptor
{
  __r_id
  __r_host
  __r_port
  __r_type : 'funcDes'
}

 a object is a remote object if it has attribute __r_type.
  
  __r_host __r_port are optional
  
  request
  {
      type : 'retrieve' or 'invoke'
      objectName : for 'retrieve'
      functionId : for 'invoke'
      objectId : for 'invoke', 'this' variable for function
      args : argument list, array
  }
  
  response
  {
      error : if error      
      
  }
 descriptors only live in transmission layer
 __r_host and __r_port are leave out if it is the local object from the server
 */

(function() {
  var Server;

  Server = require('./server');

  exports.createRmiService = function(options, callback) {
    return new Server(options, callback);
  };

}).call(this);
